#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

function question(query) {
  return new Promise(resolve => rl.question(query, resolve));
}

async function setupEnvironment() {
  console.log('🚀 PDF Genius Environment Setup\n');
  console.log('This script will help you create a .env.local file with the required environment variables.\n');

  const envPath = path.join(process.cwd(), '.env.local');

  // Check if .env.local already exists
  if (fs.existsSync(envPath)) {
    const overwrite = await question('⚠️  .env.local already exists. Do you want to overwrite it? (y/N): ');
    if (overwrite.toLowerCase() !== 'y' && overwrite.toLowerCase() !== 'yes') {
      console.log('Setup cancelled.');
      rl.close();
      return;
    }
  }

  console.log('\n📝 Please provide the following environment variables:\n');

  // Collect environment variables
  const envVars = {};

  // Google API Key
  console.log('1. Google Gemini AI API Key');
  console.log('   Get from: https://aistudio.google.com/app/apikey');
  envVars.GOOGLE_API_KEY = await question('   Enter your Google API key (AIza...): ');

  // Pinecone API Key
  console.log('\n2. Pinecone Vector Database API Key');
  console.log('   Get from: https://app.pinecone.io/');
  envVars.PINECONE_API_KEY = await question('   Enter your Pinecone API key (pc-...): ');

  // Pinecone Index Name
  console.log('\n3. Pinecone Index Name');
  const defaultIndexName = 'pdf-embeddings';
  const indexName = await question(`   Enter your Pinecone index name (default: ${defaultIndexName}): `);
  envVars.PINECONE_INDEX_NAME = indexName || defaultIndexName;

  // NextAuth Secret
  console.log('\n4. NextAuth Secret');
  console.log('   Generate with: openssl rand -base64 32');
  const secret = await question('   Enter your NextAuth secret (or press enter to generate): ');
  if (secret) {
    envVars.NEXTAUTH_SECRET = secret;
  } else {
    // Generate a random secret
    const crypto = require('crypto');
    envVars.NEXTAUTH_SECRET = crypto.randomBytes(32).toString('base64');
    console.log('   ✅ Generated random secret');
  }

  // NextAuth URL
  console.log('\n5. NextAuth URL');
  const defaultUrl = 'http://localhost:3000';
  const url = await question(`   Enter your NextAuth URL (default: ${defaultUrl}): `);
  envVars.NEXTAUTH_URL = url || defaultUrl;

  // Create .env.local content
  const envContent = `# Environment Variables for PDF Genius
# Generated by setup-env.js on ${new Date().toISOString()}

# Google Gemini AI API Key
GOOGLE_API_KEY=${envVars.GOOGLE_API_KEY}

# Pinecone Vector Database Configuration
PINECONE_API_KEY=${envVars.PINECONE_API_KEY}
PINECONE_INDEX_NAME=${envVars.PINECONE_INDEX_NAME}

# NextAuth Configuration
NEXTAUTH_SECRET=${envVars.NEXTAUTH_SECRET}
NEXTAUTH_URL=${envVars.NEXTAUTH_URL}

# Optional: Node Environment
NODE_ENV=development

# Optional: Enable debug logging
DEBUG_PDF_PROCESSING=true
`;

  // Write .env.local file
  try {
    fs.writeFileSync(envPath, envContent);
    console.log('\n✅ Successfully created .env.local file!');

    // Validate the configuration
    console.log('\n🔍 Validating configuration...');

    const validations = [];

    if (!envVars.GOOGLE_API_KEY || !envVars.GOOGLE_API_KEY.startsWith('AIza')) {
      validations.push('⚠️  Google API key format may be incorrect (should start with "AIza")');
    } else {
      validations.push('✅ Google API key format looks correct');
    }

    if (!envVars.PINECONE_API_KEY || !envVars.PINECONE_API_KEY.startsWith('pc-')) {
      validations.push('⚠️  Pinecone API key format may be incorrect (should start with "pc-")');
    } else {
      validations.push('✅ Pinecone API key format looks correct');
    }

    if (envVars.NEXTAUTH_SECRET && envVars.NEXTAUTH_SECRET.length >= 32) {
      validations.push('✅ NextAuth secret is properly configured');
    } else {
      validations.push('⚠️  NextAuth secret should be at least 32 characters long');
    }

    validations.forEach(validation => console.log(`   ${validation}`));

    console.log('\n🎉 Setup complete! Next steps:');
    console.log('   1. Make sure your Pinecone index exists and is configured');
    console.log('   2. Restart your development server: npm run dev');
    console.log('   3. Visit /diagnostic to test your configuration');
    console.log('   4. Try uploading a PDF to test the system');

  } catch (error) {
    console.error('\n❌ Failed to create .env.local file:', error.message);
  }

  rl.close();
}

// Handle script termination
process.on('SIGINT', () => {
  console.log('\n\nSetup cancelled.');
  rl.close();
  process.exit(0);
});

// Run setup
setupEnvironment().catch(error => {
  console.error('Setup failed:', error);
  rl.close();
  process.exit(1);
});
